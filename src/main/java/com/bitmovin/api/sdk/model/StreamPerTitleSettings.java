package com.bitmovin.api.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.bitmovin.api.sdk.model.StreamPerTitleFixedResolutionAndBitrateSettings;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

/**
 * StreamPerTitleSettings
 */

public class StreamPerTitleSettings {
  @JsonProperty("fixedResolutionAndBitrateSettings")
  private StreamPerTitleFixedResolutionAndBitrateSettings fixedResolutionAndBitrateSettings;

  @JsonProperty("codecMaxBitrateFactor")
  private Double codecMaxBitrateFactor;

  @JsonProperty("codecBufsizeFactor")
  private Double codecBufsizeFactor;


  /**
   * Settings for PER_TITLE_TEMPLATE_FIXED_RESOLUTION_AND_BITRATE mode
   * @return fixedResolutionAndBitrateSettings
   */
  public StreamPerTitleFixedResolutionAndBitrateSettings getFixedResolutionAndBitrateSettings() {
    return fixedResolutionAndBitrateSettings;
  }

  /**
   * Settings for PER_TITLE_TEMPLATE_FIXED_RESOLUTION_AND_BITRATE mode
   *
   * @param fixedResolutionAndBitrateSettings
   *        Settings for PER_TITLE_TEMPLATE_FIXED_RESOLUTION_AND_BITRATE mode
   */
  public void setFixedResolutionAndBitrateSettings(StreamPerTitleFixedResolutionAndBitrateSettings fixedResolutionAndBitrateSettings) {
    this.fixedResolutionAndBitrateSettings = fixedResolutionAndBitrateSettings;
  }


  /**
   * This factor is used to calculate the maxBitrate of the codec configuration for the generated representation as a multiple of the targetBitrate(generated by Per-Title algorithm). This value will take precedence over the &#39;codecMaxBitrateFactor&#39; from the pertitleStartConfiguration. This value will only have an impact on streams with h264 or h265 video configurations.
   * @return codecMaxBitrateFactor
   */
  public Double getCodecMaxBitrateFactor() {
    return codecMaxBitrateFactor;
  }

  /**
   * This factor is used to calculate the maxBitrate of the codec configuration for the generated representation as a multiple of the targetBitrate(generated by Per-Title algorithm). This value will take precedence over the &#39;codecMaxBitrateFactor&#39; from the pertitleStartConfiguration. This value will only have an impact on streams with h264 or h265 video configurations.
   *
   * @param codecMaxBitrateFactor
   *        This factor is used to calculate the maxBitrate of the codec configuration for the generated representation as a multiple of the targetBitrate(generated by Per-Title algorithm). This value will take precedence over the &#39;codecMaxBitrateFactor&#39; from the pertitleStartConfiguration. This value will only have an impact on streams with h264 or h265 video configurations.
   */
  public void setCodecMaxBitrateFactor(Double codecMaxBitrateFactor) {
    this.codecMaxBitrateFactor = codecMaxBitrateFactor;
  }


  /**
   * This factor is used to calculate the bufsize of the codec configuration for the generated representations as a multiple of the targetBitrate(generated by Per-Title algorithm). This value will take precedence over the &#39;codecBufsizeFactor&#39; from the pertitleStartConfiguration.. This value will only have an impact on streams with h264 or h265 video configurations.
   * @return codecBufsizeFactor
   */
  public Double getCodecBufsizeFactor() {
    return codecBufsizeFactor;
  }

  /**
   * This factor is used to calculate the bufsize of the codec configuration for the generated representations as a multiple of the targetBitrate(generated by Per-Title algorithm). This value will take precedence over the &#39;codecBufsizeFactor&#39; from the pertitleStartConfiguration.. This value will only have an impact on streams with h264 or h265 video configurations.
   *
   * @param codecBufsizeFactor
   *        This factor is used to calculate the bufsize of the codec configuration for the generated representations as a multiple of the targetBitrate(generated by Per-Title algorithm). This value will take precedence over the &#39;codecBufsizeFactor&#39; from the pertitleStartConfiguration.. This value will only have an impact on streams with h264 or h265 video configurations.
   */
  public void setCodecBufsizeFactor(Double codecBufsizeFactor) {
    this.codecBufsizeFactor = codecBufsizeFactor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamPerTitleSettings streamPerTitleSettings = (StreamPerTitleSettings) o;
    return Objects.equals(this.fixedResolutionAndBitrateSettings, streamPerTitleSettings.fixedResolutionAndBitrateSettings) &&
        Objects.equals(this.codecMaxBitrateFactor, streamPerTitleSettings.codecMaxBitrateFactor) &&
        Objects.equals(this.codecBufsizeFactor, streamPerTitleSettings.codecBufsizeFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedResolutionAndBitrateSettings, codecMaxBitrateFactor, codecBufsizeFactor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamPerTitleSettings {\n");
    
    sb.append("    fixedResolutionAndBitrateSettings: ").append(toIndentedString(fixedResolutionAndBitrateSettings)).append("\n");
    sb.append("    codecMaxBitrateFactor: ").append(toIndentedString(codecMaxBitrateFactor)).append("\n");
    sb.append("    codecBufsizeFactor: ").append(toIndentedString(codecBufsizeFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

